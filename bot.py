import os
import logging
import tempfile
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import yt_dlp
import ffmpeg

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN not found. Set it in Render Environment Variables.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(lambda message: message.text == "/start")
async def cmd_start(message: Message):
    await message.answer("üéß –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, Instagram, Facebook –∏ —Ç.–¥.), –∏ —è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –µ–≥–æ –≤ MP3.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Å—ã–ª–æ–∫) ===
@dp.message()
async def convert_to_mp3(message: Message):
    url = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–æ–π
    if not url.startswith("http"):
        await message.answer("‚ùó –û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
        return

    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –∞—É–¥–∏–æ, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    try:
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        with tempfile.TemporaryDirectory() as tmpdir:
            # –ü—É—Ç—å –∫ mp3-—Ñ–∞–π–ª—É
            mp3_path = os.path.join(tmpdir, "audio.mp3")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
            ydl_opts = {
                "format": "bestaudio/best",
                "outtmpl": os.path.join(tmpdir, "temp.%(ext)s"),
                "quiet": True,
                "noplaylist": True,
            }

            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                input_path = ydl.prepare_filename(info)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
            ffmpeg.input(input_path).output(mp3_path, codec="libmp3lame", qscale=2).run(quiet=True)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º MP3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer_audio(types.FSInputFile(mp3_path), caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–π MP3 üéµ")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")

# === –ó–∞–ø—É—Å–∫ Webhook ===
async def start_webhook():
    app = web.Application()
    webhook_path = "/webhook"
    SimpleRequestHandler(dp, bot).register(app, path=webhook_path)
    setup_application(app, dp)
    logging.info("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render")
    return app

if __name__ == "__main__":
    web.run_app(start_webhook(), host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
